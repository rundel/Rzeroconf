// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Rzeroconf.h"
#include <Rcpp.h>

using namespace Rcpp;

// browse_service
Rcpp::XPtr<zc_browser> browse_service(std::string const& type, std::string const& domain);
RcppExport SEXP _Rzeroconf_browse_service(SEXP typeSEXP, SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string const& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type domain(domainSEXP);
    rcpp_result_gen = Rcpp::wrap(browse_service(type, domain));
    return rcpp_result_gen;
END_RCPP
}
// get_browser_results
Rcpp::DataFrame get_browser_results(Rcpp::XPtr<zc_browser> b);
RcppExport SEXP _Rzeroconf_get_browser_results(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<zc_browser> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(get_browser_results(b));
    return rcpp_result_gen;
END_RCPP
}
// avahi_browse_service
Rcpp::XPtr<avahi_browser> avahi_browse_service(std::string const& type, std::string const& domain);
RcppExport SEXP _Rzeroconf_avahi_browse_service(SEXP typeSEXP, SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string const& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type domain(domainSEXP);
    rcpp_result_gen = Rcpp::wrap(avahi_browse_service(type, domain));
    return rcpp_result_gen;
END_RCPP
}
// avahi_get_results
Rcpp::List avahi_get_results(Rcpp::XPtr<avahi_browser> ptr);
RcppExport SEXP _Rzeroconf_avahi_get_results(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<avahi_browser> >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(avahi_get_results(ptr));
    return rcpp_result_gen;
END_RCPP
}
// avahi_browse_domain
Rcpp::XPtr<avahi_domain_browser> avahi_browse_domain(std::string const& domain);
RcppExport SEXP _Rzeroconf_avahi_browse_domain(SEXP domainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string const& >::type domain(domainSEXP);
    rcpp_result_gen = Rcpp::wrap(avahi_browse_domain(domain));
    return rcpp_result_gen;
END_RCPP
}
// register_service
Rcpp::XPtr<zc_register> register_service(std::string const& name, std::string const& type, std::string const& domain, uint16_t port, Rcpp::List txt_record);
RcppExport SEXP _Rzeroconf_register_service(SEXP nameSEXP, SEXP typeSEXP, SEXP domainSEXP, SEXP portSEXP, SEXP txt_recordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string const& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string const& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type port(portSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type txt_record(txt_recordSEXP);
    rcpp_result_gen = Rcpp::wrap(register_service(name, type, domain, port, txt_record));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rzeroconf_browse_service", (DL_FUNC) &_Rzeroconf_browse_service, 2},
    {"_Rzeroconf_get_browser_results", (DL_FUNC) &_Rzeroconf_get_browser_results, 1},
    {"_Rzeroconf_avahi_browse_service", (DL_FUNC) &_Rzeroconf_avahi_browse_service, 2},
    {"_Rzeroconf_avahi_get_results", (DL_FUNC) &_Rzeroconf_avahi_get_results, 1},
    {"_Rzeroconf_avahi_browse_domain", (DL_FUNC) &_Rzeroconf_avahi_browse_domain, 1},
    {"_Rzeroconf_register_service", (DL_FUNC) &_Rzeroconf_register_service, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rzeroconf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
